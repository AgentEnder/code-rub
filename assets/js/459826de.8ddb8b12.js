"use strict";(self.webpackChunkcode_rub=self.webpackChunkcode_rub||[]).push([[144],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6820:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>l,contentTitle:()=>u,metadata:()=>p,toc:()=>s,default:()=>d});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],l={id:"index",title:"@code-rub/core",slug:"/API/@code-rub/core/",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},u="@code-rub/core",p={unversionedId:"API/@code-rub/core/index",id:"API/@code-rub/core/index",title:"@code-rub/core",description:"The core of @code-rub is agnostic to ticketing system, project philosophy, and technology. On its own, it will do nothing except keep track of which files have been assigned for a rub, but it doesn't know how to actually create tickets and assign them. It doesn't even log them to the console by default.",source:"@site/docs/API/@code-rub/core/index.md",sourceDirName:"API/@code-rub/core",slug:"/API/@code-rub/core/",permalink:"/code-rub/API/@code-rub/core/",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"index",title:"@code-rub/core",slug:"/API/@code-rub/core/",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},sidebar:"someSidebar",previous:{title:"AzureDevopsPluginConfig",permalink:"/code-rub/API/@code-rub/azure-devops/interfaces/models.AzureDevopsPluginConfig"},next:{title:"Exports",permalink:"/code-rub/API/@code-rub/core/modules"}},s=[{value:"Plugins",id:"plugins",children:[],level:2}],c={toc:s};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"code-rubcore"},"@code-rub/core"),(0,o.kt)("p",null,"The core of @code-rub is agnostic to ticketing system, project philosophy, and technology. On its own, it will do nothing except keep track of which files have been assigned for a rub, but it doesn't know how to actually create tickets and assign them. It doesn't even log them to the console by default."),(0,o.kt)("h2",{id:"plugins"},"Plugins"),(0,o.kt)("p",null,"This is where the plugins come in. A code-rub plugin can change almost everything about the flow of ",(0,o.kt)("inlineCode",{parentName:"p"},"npx code-rub"),". They can provide:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A setup function: ",(0,o.kt)("inlineCode",{parentName:"li"},"setup")),(0,o.kt)("li",{parentName:"ul"},"An initial configuration, used in ",(0,o.kt)("inlineCode",{parentName:"li"},"npx code-rub init --preset"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"initialConfiguration")),(0,o.kt)("li",{parentName:"ul"},"A method to process assignments, after they are generated: ",(0,o.kt)("inlineCode",{parentName:"li"},"processAssignments")),(0,o.kt)("li",{parentName:"ul"},"A method to process the file queue, useful for filtering out file extensions or paths: ",(0,o.kt)("inlineCode",{parentName:"li"},"processFileQueue")),(0,o.kt)("li",{parentName:"ul"},"A method to process the ",(0,o.kt)("inlineCode",{parentName:"li"},"Ignore")," object used when generating the repository file map: ",(0,o.kt)("inlineCode",{parentName:"li"},"processIgnore"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This is ran before ",(0,o.kt)("inlineCode",{parentName:"li"},"code-rub")," saves the file map, so it affects all configuration files. This should only be specified in the repositories base configuration (or sole configuration)."))),(0,o.kt)("li",{parentName:"ul"},"A method to read and write the file map: ",(0,o.kt)("inlineCode",{parentName:"li"},"readFileMap")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"saveFileMap")," respectively.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Only one plugin may specify these methods.")))),(0,o.kt)("p",null,"Plugins are specified by two pieces of configuration, the ",(0,o.kt)("inlineCode",{parentName:"p"},"plugins")," array and the ",(0,o.kt)("inlineCode",{parentName:"p"},"pluginConfiguration")," object. Plugin's are loaded based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"plugins")," array, and the capabilities they provide are configured through their entry in ",(0,o.kt)("inlineCode",{parentName:"p"},"pluginConfiguration"),"."),(0,o.kt)("p",null,"Plugins are loaded, and executed based on their order in the ",(0,o.kt)("inlineCode",{parentName:"p"},"plugins")," array. This is especially important for functions like ",(0,o.kt)("inlineCode",{parentName:"p"},"processFileQueue")," which chains the results during execution."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"As an example, imagine you have plugin1 which removes typescript files but plugin2 expects them to be present. If you use ",(0,o.kt)("inlineCode",{parentName:"p"},"plugins: [plugin1, plugin2]"),", plugin2 would not see any of the typescript files. If you use ",(0,o.kt)("inlineCode",{parentName:"p"},"plugins: [plugin2, plugin1]"),", plugin2 would see them since they are not removed yet.")),(0,o.kt)("p",null,"For an example plugin implementation, check the ",(0,o.kt)("inlineCode",{parentName:"p"},"jira")," package in this repository."))}d.isMDXComponent=!0}}]);